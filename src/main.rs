extern crate postgres;
use postgres::{Client, Error, NoTls};

use std::fs::File;
use std::io::{BufRead, BufReader};

struct CVE {
    cve_id: String,
    library_name: String,
    start_version: String,
    end_version: String,
}

fn main() -> Result<(), Error> {
    let path = "res.txt";

    // 读取文件并处理每一行
    let file = File::open(path).unwrap();
    let reader = BufReader::new(file);
    let mut cves = vec![];
    for line in reader.lines() {
        let line = line.unwrap();
        let parts: Vec<&str> = line.split_whitespace().collect();

        if parts.len() == 4 {
            let cve = CVE {
                cve_id: parts[0].to_string(),
                library_name: parts[1].to_string(),
                start_version: parts[2].to_string(),
                end_version: parts[3].to_string(),
            };
            cves.push(cve);
        } else {
            eprintln!("Unexpected format in line: {}", line);
        }
    }
    // 打印读取的结果，确认操作成功

    let mut client = Client::connect("postgres://mega:mega@localhost/cratespro", NoTls)
        .expect("Failed to connect to database");
    client.batch_execute(
        "
        CREATE TABLE IF NOT EXISTS cves (
            cve_id            VARCHAR(50) NOT NULL,
            name              VARCHAR(20),
            start_version     VARCHAR(10),
            end_version       VARCHAR(10),
            PRIMARY KEY (cve_id)
            )
    ",
    )?; //建表
    for cve in cves {
        client.execute(
            "INSERT INTO cves (cve_id,name,start_version,end_version) VALUES ($1, $2,$3,$4)",
            &[
                &cve.cve_id,
                &cve.library_name,
                &cve.start_version,
                &cve.end_version,
            ],
        )?;
    }

    Ok(())
}
