extern crate postgres;
use std::fs::File;
use std::io::{self, BufRead, BufReader};
use std::path::Path;
use postgres::{Client, NoTls, Error};
use std::collections::HashMap;
struct LibraryVersion {
    cve_id:String,
    library_name: String,
    start_version: String,
    end_version: String,
}
fn main()->Result<(), Error>
{
    let path = "res.txt";

    // 读取文件并处理每一行
    let file = File::open(path).unwrap();
    let reader = BufReader::new(file);
    let mut library_versions = vec![];
    for line in reader.lines() {
        let line = line.unwrap();
        let parts: Vec<&str> = line.split_whitespace().collect();

        if parts.len() == 4 {
            let library_version = LibraryVersion {
                cve_id:parts[0].to_string(),
                library_name: parts[1].to_string(),
                start_version: parts[2].to_string(),
                end_version: parts[3].to_string(),
            };
            library_versions.push(library_version);
        } else {
            eprintln!("Unexpected format in line: {}", line);
        }
    }
    // 打印读取的结果，确认操作成功
    
    
    let mut client = Client::connect("postgres://username:password@localhost/dbname", NoTls).expect("Failed to connect to database");
    client.batch_execute("
        CREATE TABLE IF NOT EXISTS versions (
            cve_id            VARCHAR(50) NOT NULL,
            name              VARCHAR(20),
            start_version     VARCHAR(10),
            end_version       VARCHAR(10),
            PRIMARY KEY (cve_id)
            )
    ")?;//建表
    for versions in library_versions{
        client.execute(
            "INSERT INTO versions (cve_id,name,start_version,end_version) VALUES ($1, $2,$3,$4)",
            &[&versions.cve_id,&versions.library_name, &versions.start_version,&versions.end_version],
    )?;
    }//插入操作
    /*for row in client.query("SELECT cve_id,name, start_version,end_version FROM versions", &[])? {
        let versions = LibraryVersion {
            cve_id:row.get(0),
            library_name: row.get(1),
            start_version: row.get(2),
            end_version: row.get(3),
        };
        println!("{} {} {} {}",versions.cve_id, versions.library_name, versions.start_version,versions.end_version);
    }*///输出检查是否正确插入
    
    Ok(())
}
